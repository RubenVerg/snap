<blocks app="Snap! 5.4, http://snap.berkeley.edu" version="1"><block-definition s="... %&apos;op&apos; %&apos;items&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">+<options>+&#xD;×</options></input><input type="%mult%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>op</l><l>items</l></list><l>switch (op) {&#xD;  case &apos;+&apos;:&#xD;    return items.asArray().reduce((a, i) =&gt; {return a + i});&#xD;  case &apos;×&apos;:&#xD;    return items.asArray().reduce((a, i) =&gt; {return a * i});&#xD;}</l></block><list><block var="op"/><block var="items"/></list></block></block></script></block-definition><block-definition s="%&apos;index&apos; √ %&apos;radicand&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%n">2</input><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>x</l><l>n</l></list><l>try {&#xD;    var negate = n % 2 == 1 &amp;&amp; x &lt; 0;&#xD;    if(negate)&#xD;      x = -x;&#xD;    var possible = Math.pow(x, 1 / n);&#xD;    n = Math.pow(possible, n);&#xD;    if(Math.abs(x - n) &lt; 1 &amp;&amp; (x &gt; 0 == n &gt; 0))&#xD;      return negate ? -possible : possible;&#xD;  } catch(e){}</l></block><list><block var="radicand"/><block var="index"/></list></block></block></script></block-definition><block-definition s="... %&apos;op&apos; %&apos;items&apos;" type="predicate" category="operators"><header></header><code></code><translations></translations><inputs><input type="%s" readonly="true">&amp;<options>&amp;&#xD;|</options></input><input type="%mult%b" readonly="true">&#xD;          &#xD;        <options>&amp;&#xD;|</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>op</l><l>items</l></list><l>switch (op) {&#xD;  case &apos;&amp;&apos;:&#xD;    return items.asArray().reduce((a, i) =&gt; {return a &amp;&amp; i});&#xD;  case &apos;|&apos;:&#xD;    return items.asArray().reduce((a, i) =&gt; {return a || i});&#xD;}</l></block><list><block var="op"/><block var="items"/></list></block></block></script></block-definition><block-definition s="↕ %&apos;text&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%mlt">Lorem ipusm dolor sit amet...</input></inputs><script><block s="doReport"><block var="text"/></block></script></block-definition><block-definition s="&lt;/&gt; %&apos;code&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%code">console.log(&apos;Hello World!&apos;)</input></inputs><script><block s="doReport"><block var="code"/></block></script></block-definition><block-definition s="is an integer %&apos;what&apos;" type="predicate" category="operators"><header></header><code></code><translations></translations><inputs><input type="%n">1</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>i</l></list><l>return (parseInt(i.toString()) === i)</l></block><list><block var="what"/></list></block></block></script></block-definition><block-definition s="hex double %&apos;str&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%txt">FF</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>h</l></list><l>if (h.length === 1) {&#xD;  return parseInt(h[0], 16) * 0x10 + parseInt(h[0], 16)&#xD;} else if (h.length === 2) {&#xD;  return parseInt(h[0], 16) * 0x10 + parseInt(h[1], 16)&#xD;} else {&#xD;  throw new RangeError(&apos;String must be one or two characters long.&apos;)&#xD;}</l></block><list><block var="str"/></list></block></block></script></block-definition></blocks>