<blocks app="Snap! 5.4, http://snap.berkeley.edu" version="1"><block-definition s="throw %&apos;err&apos; %&apos;t&apos;" type="command" category="control"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s" readonly="true">Error<options>Error&#xD;RangeError&#xD;TypeError&#xD;SyntaxError</options></input></inputs><script><custom-block s="throw %s %txt"><block var="err"/><block var="t"/></custom-block></script></block-definition><block-definition s="throw %&apos;what&apos; %&apos;type&apos;" type="command" category="control"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>w</l><l>t</l></list><l>throw new (eval(t))(w)</l></block><list><block var="what"/><block var="type"/></list></block></block></script></block-definition><block-definition s="let %&apos;name&apos; = %&apos;value&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%upvar"></input><input type="%s"></input></inputs><script><block s="doSetVar"><l>name</l><block var="value"/></block></script></block-definition><block-definition s="$paintbucket RGB ( %&apos;r&apos; %&apos;g&apos; %&apos;b&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">255</input><input type="%n">255</input><input type="%n">255</input></inputs><script><block s="doReport"><custom-block s="$paintbucket RGBA ( %n %n %n %n )"><block var="r"/><block var="g"/><block var="b"/><l>1</l></custom-block></block></script></block-definition><block-definition s="$paintbucket RGBA ( %&apos;r&apos; %&apos;g&apos; %&apos;b&apos; %&apos;a&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">255</input><input type="%n">255</input><input type="%n">255</input><input type="%n">1</input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="r"/></custom-block></block><script><custom-block s="throw %s %s"><l>Red must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="g"/></custom-block></block><script><custom-block s="throw %s %s"><l>Green must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="b"/></custom-block></block><script><custom-block s="throw %s %s"><l>Blue must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="r"/><l>0</l></block><block s="reportGreaterThan"><block var="r"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Red must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="g"/><l>0</l></block><block s="reportGreaterThan"><block var="g"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Green must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="b"/><l>0</l></block><block s="reportGreaterThan"><block var="b"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Blue must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="a"/><l>0</l></block><block s="reportGreaterThan"><block var="a"/><l>1</l></block></block><script><custom-block s="throw %s %s"><l>Alpha must be between 0 and 1</l><l>RangeError</l></custom-block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>r</l><l>g</l><l>b</l><l>a</l></list><l>return new Color(r, g, b, a)</l></block><list><block var="r"/><block var="g"/><block var="b"/><block var="a"/></list></block></block></script></block-definition><block-definition s="$paintbucket HEX ( # %&apos;str&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%txt">FFFFFF</input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportOr"><block s="reportEquals"><block s="reportStringSize"><block var="str"/></block><l>3</l></block><block s="reportEquals"><block s="reportStringSize"><block var="str"/></block><l>6</l></block></block></block><script><custom-block s="throw %s %s"><l>Hex input must be three or six characters long</l><l>SyntaxError</l></custom-block></script></block><block s="doReport"><custom-block s="$paintbucket HEXA ( # %txt )"><block s="reportJoinWords"><list><block var="str"/><block s="reportIfElse"><block s="reportEquals"><block s="reportStringSize"><block var="str"/></block><l>3</l></block><l>f</l><l>ff</l></block></list></block></custom-block></block></script></block-definition><block-definition s="$paintbucket HEXA ( # %&apos;str&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%txt">FFFFFFFF</input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportOr"><block s="reportEquals"><block s="reportStringSize"><block var="str"/></block><l>4</l></block><block s="reportEquals"><block s="reportStringSize"><block var="str"/></block><l>8</l></block></block></block><script><custom-block s="throw %s %s"><l>Hex input must be four or eight characters long</l><l>SyntaxError</l></custom-block></script></block><custom-block s="let %upvar = %s"><l>r</l><custom-block s="hex double %txt"><block s="evaluate"><block s="reportJSFunction"><list><l>s</l></list><l>return (s.length === 4) ? s[0] : s[0] + s[1]</l></block><list><block var="str"/></list></block></custom-block></custom-block><custom-block s="let %upvar = %s"><l>g</l><custom-block s="hex double %txt"><block s="evaluate"><block s="reportJSFunction"><list><l>s</l></list><l>return (s.length === 4) ? s[1] : s[2] + s[3]</l></block><list><block var="str"/></list></block></custom-block></custom-block><custom-block s="let %upvar = %s"><l>b</l><custom-block s="hex double %txt"><block s="evaluate"><block s="reportJSFunction"><list><l>s</l></list><l>return (s.length === 4) ? s[2] : s[4] + s[5]</l></block><list><block var="str"/></list></block></custom-block></custom-block><custom-block s="let %upvar = %s"><l>a</l><custom-block s="hex double %txt"><block s="evaluate"><block s="reportJSFunction"><list><l>s</l></list><l>return (s.length === 4) ? s[3] : s[6] + s[7]</l></block><list><block var="str"/></list></block></custom-block></custom-block><block s="doReport"><custom-block s="$paintbucket RGBA ( %n %n %n %n )"><block var="r"/><block var="g"/><block var="b"/><block s="reportQuotient"><block var="a"/><l>255</l></block></custom-block></block></script></block-definition><block-definition s="$paintbucket HSV ( %&apos;h&apos; %&apos;s&apos; %&apos;v&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">100</input><input type="%n">100</input></inputs><script><block s="doReport"><custom-block s="$paintbucket HSVA ( %n %n %n %n )"><block var="h"/><block var="s"/><block var="v"/><l>1</l></custom-block></block></script></block-definition><block-definition s="$paintbucket HSVA ( %&apos;h&apos; %&apos;s&apos; %&apos;v&apos; %&apos;a&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">100</input><input type="%n">100</input><input type="%n">1</input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="h"/></custom-block></block><script><custom-block s="throw %s %s"><l>Hue must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="s"/></custom-block></block><script><custom-block s="throw %s %s"><l>Saturation must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="v"/></custom-block></block><script><custom-block s="throw %s %s"><l>Value must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="h"/><l>0</l></block><block s="reportGreaterThan"><block var="h"/><l>360</l></block></block><script><custom-block s="throw %s %s"><l>Hue must be between 0° and 360°</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="s"/><l>0</l></block><block s="reportGreaterThan"><block var="s"/><l>100</l></block></block><script><custom-block s="throw %s %s"><l>Saturation must be between 0% and 100%</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="v"/><l>0</l></block><block s="reportGreaterThan"><block var="v"/><l>100</l></block></block><script><custom-block s="throw %s %s"><l>Value must be between 0% and 100%</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="a"/><l>0</l></block><block s="reportGreaterThan"><block var="a"/><l>1</l></block></block><script><custom-block s="throw %s %s"><l>Alpha must be between 0 and 1</l><l>RangeError</l></custom-block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>hin</l><l>sin</l><l>vin</l><l>a</l></list><l>let h = hin / 360;&#xD;let s = sin / 100;&#xD;let v = vin / 100;&#xD;&#xD;let r, g, b;&#xD;&#xD;const i = Math.floor(h * 6);&#xD;const f = h * 6 - i;&#xD;const p = v * (1 - s);&#xD;const q = v * (1 - f * s);&#xD;const t = v * (1 - (1 - f) * s);&#xD;&#xD;switch(i % 6){&#xD;    case 0: r = v, g = t, b = p; break;&#xD;    case 1: r = q, g = v, b = p; break;&#xD;    case 2: r = p, g = v, b = t; break;&#xD;    case 3: r = p, g = q, b = v; break;&#xD;    case 4: r = t, g = p, b = v; break;&#xD;    case 5: r = v, g = p, b = q; break;&#xD;}&#xD;&#xD;return new Color(r * 255, g * 255, b * 255, a);</l></block><list><block var="h"/><block var="s"/><block var="v"/><block var="a"/></list></block></block></script></block-definition><block-definition s="$paintbucket YCbCr ( %&apos;y&apos; %&apos;cb&apos; %&apos;cr&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">255</input><input type="%n">255</input><input type="%n">255</input></inputs><script><block s="doReport"><l></l></block></script></block-definition><block-definition s="$paintbucket YCbCrA ( %&apos;y&apos; %&apos;cb&apos; %&apos;cr&apos; %&apos;a&apos; )" type="reporter" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n">255</input><input type="%n">255</input><input type="%n">255</input><input type="%n">1</input></inputs><script><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="y"/></custom-block></block><script><custom-block s="throw %s %s"><l>Luminance (Y) must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="cb"/></custom-block></block><script><custom-block s="throw %s %s"><l>Cb must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportNot"><custom-block s="is an integer %n"><block var="cr"/></custom-block></block><script><custom-block s="throw %s %s"><l>Cr must be an integer</l><l>TypeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="y"/><l>0</l></block><block s="reportGreaterThan"><block var="y"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Luminance (Y) must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="cb"/><l>0</l></block><block s="reportGreaterThan"><block var="cr"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Cb must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="cr"/><l>0</l></block><block s="reportGreaterThan"><block var="cr"/><l>255</l></block></block><script><custom-block s="throw %s %s"><l>Cr must be between 0 and 255</l><l>RangeError</l></custom-block></script></block><block s="doIf"><block s="reportOr"><block s="reportLessThan"><block var="a"/><l>0</l></block><block s="reportGreaterThan"><block var="a"/><l>1</l></block></block><script><custom-block s="throw %s %s"><l>Alpha must be between 0 and 1</l><l>RangeError</l></custom-block></script></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>Y</l><l>Cb</l><l>Cr</l><l>a</l></list><l>let r = Math.round(Y + 1.40200 * (Cr - 0x80));&#xD;let g = Math.round(Y - 0.34414 * (Cb - 0x80) - 0.71414 * (Cr - 0x80));&#xD;let b = Math.round(Y + 1.77200 * (Cb - 0x80));&#xD;&#xD;r = Math.max(0, Math.min(255, r));&#xD;g = Math.max(0, Math.min(255, g));&#xD;b = Math.max(0, Math.min(255, b));&#xD;&#xD;return new Color(r, g, b, a);</l></block><list><block var="y"/><block var="cb"/><block var="cr"/><block var="a"/></list></block></block></script></block-definition><block-definition s="is an integer %&apos;what&apos;" type="predicate" category="operators"><header></header><code></code><translations></translations><inputs><input type="%n">1</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>i</l></list><l>return (parseInt(i.toString()) === i)</l></block><list><block var="what"/></list></block></block></script></block-definition><block-definition s="hex double %&apos;str&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%txt">FF</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>h</l></list><l>if (h.length === 1) {&#xD;  return parseInt(h[0], 16) * 0x10 + parseInt(h[0], 16)&#xD;} else if (h.length === 2) {&#xD;  return parseInt(h[0], 16) * 0x10 + parseInt(h[1], 16)&#xD;} else {&#xD;  throw new RangeError(&apos;String must be one or two characters long.&apos;)&#xD;}</l></block><list><block var="str"/></list></block></block></script></block-definition></blocks>